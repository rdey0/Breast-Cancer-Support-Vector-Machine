{"version":3,"sources":["graph_img/graph.png","components/select_box.js","components/slider.js","components/header.js","graph_img/loading_indicator.svg","components/graph_plot.js","components/onboarding.js","App.js","components/onboarding_page_0.js","components/onboarding_page_1.js","components/onboarding_page_2.js","components/onboarding_page_3.js","components/onboarding_page_4.js","serviceWorker.js","index.js"],"names":["select_box","props","state","value","variable_name","handleChange","bind","event","id","this","new_value","target","setState","onChange","className","label","React","Component","slider","type","min","max","Header","onClick","showModal","href","src","download","Plot","isLoading","loading_indicator","alt","modal_styles","overlay","backgroundColor","content","height","width","border","borderRadius","boxShadow","margin","overflow","OnboardingContent","pages","filter","Page","index","pageNum","map","Onboarding","modal_open","step_num","total_steps","length","close_modal","next_page","previous_page","page_num","isOpen","style","ariaHideApp","closeModal","onboarding_content","App","plot_src","graph_img","x_var","y_var","degree","cost","model_accuracy","graph_loading","show_modal","handle_modal_open","console","log","handle_modal_close","handle_field_change","update_accuracy","fetch","headers","method","then","res","json","accuracy","parseFloat","toPrecision","refresh_graph","request_params","mode","body","JSON","stringify","redirect","blob","URL","createObjectURL","catch","error","optimize_graph","best_degree","best_cost","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f3776f25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/graph.8f78b8bb.png\";","import React from 'react';\r\n\r\nexport default class select_box extends React.Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {value: props.variable_name};\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    handleChange(event){\r\n        var id = this.props.id;\r\n        var new_value = event.target.value;\r\n        this.setState({value: new_value}, ()=>{\r\n            this.props.onChange(id, new_value);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            \r\n            <div className='selector-container'>\r\n                <div className='control-label'>{this.props.label}</div>\r\n                <select className='selector' value={this.state.value} onChange={this.handleChange}>\r\n                    <option value='mean concavity'>Mean Concavity</option>\r\n                    <option value='mean texture'>Mean Texture</option>\r\n                    <option value='mean compactness'>Mean Compactness</option>\r\n                    <option value='worst concavity'>Worst Concavity</option>\r\n                    <option value='worst texture'>Worst Texture</option>\r\n                    <option value='worst compactness'>Worst Compactness</option>\r\n                </select>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class slider extends React.Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {value: props.value};\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        var id = this.props.id;\r\n        var new_value = event.target.value;\r\n        this.setState({value: new_value}, ()=>{\r\n            this.props.onChange(id, new_value);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className='slide-container'>\r\n                <div className='control-label'>{this.props.label}</div>\r\n                <input id={this.props.id} className=\"slider\" type=\"range\" min={this.props.min} max={this.props.max} \r\n                    value={this.props.value} onChange={this.handleChange}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default function Header (props){\r\n    return (\r\n        <div className=\"App-header\">\r\n            <div className='title-container'>\r\n                <div className='header-title'>Cancer Classifier</div>\r\n            </div>\r\n            <div className='header-item' onClick={props.showModal}>\r\n                <div>Tutorial</div>\r\n            </div>\r\n            <div className='header-item'>\r\n                <a href={props.src} download>\r\n                    <div>Download Graph</div>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}","export default __webpack_public_path__ + \"static/media/loading_indicator.fef9519a.svg\";","import React from 'react';\r\nimport loading_indicator from '../graph_img/loading_indicator.svg'\r\n\r\nexport default function Plot(props) {\r\n    return (\r\n        \r\n        <div className='plot'>\r\n            {props.isLoading &&\r\n                <div> \r\n                    <div className='loading-indicator'>\r\n                        <img src={loading_indicator} alt='loading'/>\r\n                    </div>\r\n                    <div className='graph-overlay'></div>\r\n                </div>\r\n            }\r\n            <img className='graph' src={props.src} alt='graph'/>\r\n        </div>\r\n    );\r\n}\r\n/*\r\nexport default class Plot extends React.Component {\r\n    constructor(props){\r\n        super()\r\n        this.state = {path: props.path}\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <img  src={this.state.path} alt='graph'/>\r\n        )\r\n    }\r\n}\r\n*/","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\n\r\nconst modal_styles = {\r\n    overlay: {\r\n        backgroundColor: 'rgba(136, 136, 136, 0.7)'\r\n    },\r\n    content:{\r\n        height: '50%',\r\n        width: '40%',\r\n        border: 'none',\r\n        borderRadius: '10px',\r\n        boxShadow: 'rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px',\r\n        margin: 'auto auto',\r\n        overflow: 'hidden',\r\n    }\r\n};\r\n\r\n\r\nfunction OnboardingContent (props) {\r\n    return props.pages\r\n        .filter((Page, index) => index === props.pageNum - 1)\r\n        .map((Page, index) => {\r\n            return <div className='onboarding-content-container' key={index}><Page/></div>\r\n        });\r\n}\r\n\r\nexport default class Onboarding extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            modal_open: props.showModal, \r\n            step_num: 1,\r\n            pages: props.pages, \r\n            total_steps: props.pages.length\r\n        };\r\n        this.close_modal = this.close_modal.bind(this);\r\n        this.next_page = this.next_page.bind(this);\r\n        this.previous_page = this.previous_page.bind(this);\r\n    }\r\n    \r\n    close_modal(){\r\n        this.setState({modal_open: false})\r\n    }\r\n\r\n    next_page() {\r\n        const page_num = this.state.step_num;\r\n        const num_pages = this.state.total_steps;\r\n        if (page_num < num_pages)\r\n            this.setState({step_num: page_num + 1})   \r\n    }\r\n\r\n    previous_page() {\r\n        const page_num = this.state.step_num;\r\n        if (page_num > 1)\r\n            this.setState({step_num: page_num - 1})       \r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal isOpen={this.props.showModal} style={modal_styles} ariaHideApp={false}>\r\n                <div className='onboarding-controls'>\r\n                    <div className='step-container'>\r\n                        <div>Step {this.state.step_num} / {this.state.total_steps}</div>\r\n                    </div>\r\n                    <div className='change-page-container'>\r\n\r\n                        {this.state.step_num > 1 &&\r\n                            <div className='change-page-back' onClick={this.previous_page}>Back</div>\r\n                        }\r\n\r\n                        {this.state.step_num < this.state.total_steps\r\n                            ?<div className='change-page-next' onClick={this.next_page}>Next</div>\r\n                            :<div className='change-page-next' onClick={this.props.closeModal}>Done</div>\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n                <OnboardingContent pages={this.state.pages} pageNum={this.state.step_num}/>\r\n\r\n            </Modal>\r\n        );\r\n    }\r\n} ","import React from 'react';\nimport './App.css';\nimport graph_img from './graph_img/graph.png'\nimport Select from './components/select_box.js'\nimport Slider from './components/slider.js'\nimport Header from './components/header.js'\nimport Plot from './components/graph_plot.js'\nimport Onboarding from './components/onboarding.js'\nimport Page_0 from './components/onboarding_page_0.js'\nimport Page_1 from './components/onboarding_page_1.js'\nimport Page_2 from './components/onboarding_page_2.js'\nimport Page_3 from './components/onboarding_page_3.js'\nimport Page_4 from './components/onboarding_page_4.js'\n\nconst onboarding_content = [Page_0, Page_1, Page_2, Page_3, Page_4];\n\nclass App extends React.Component {\n  state = {\n    plot_src: graph_img, \n    x_var: 'mean concavity', \n    y_var: 'worst concavity', \n    degree: '1', \n    cost: '1',\n    model_accuracy: 0,\n    graph_loading: false,\n    show_modal: false\n  }\n\n  handle_modal_open=()=>{\n    console.log('open modal');\n    this.setState({show_modal: true});\n  }\n\n  handle_modal_close=()=> {\n    this.setState({show_modal: false});\n  }\n\n  handle_field_change=(id, value)=>{\n    this.setState({[id]: value});\n  }\n\n  update_accuracy=()=>{\n    var request_params = {\n      headers: {\n        'Content-Type': \"application/json;charset=utf-8\"\n      },\n      method: 'GET'\n    }\n    fetch('https://cancer-classifier.herokuapp.com/graph/accuracy', request_params)\n      .then(res => res.json())\n      .then(res => {\n        var num_figures = 4;\n        var accuracy = (parseFloat(res.accuracy) * 100).toPrecision(num_figures);\n        this.setState({model_accuracy: accuracy});\n      })\n  }\n\n  refresh_graph=()=>{\n    var request_params = {\n      headers: {\n        'Content-Type': \"application/json;charset=utf-8\"\n      },\n      method: 'POST',\n      mode: 'cors',\n      body: JSON.stringify(this.state),\n      redirect: 'follow'\n    };\n    this.setState({graph_loading: true});\n    fetch('https://cancer-classifier.herokuapp.com/graph', request_params)\n      .then(res => {\n        return res.blob();\n      })\n      .then(res =>{\n        this.setState({plot_src: URL.createObjectURL(res)});\n        this.update_accuracy();\n        this.setState({graph_loading: false}); \n      })\n      .catch(error => console.log('Error:', error));\n  }\n\n  optimize_graph=()=>{\n    var request_params = {\n      headers: {\n        'Content-Type': \"application/json;charset=utf-8\"\n      },\n      method: 'POST',\n      body: JSON.stringify(this.state),\n      redirect: 'follow'\n    };\n    this.setState({graph_loading: true});\n    fetch('/optimize_graph', request_params)\n    .then(res => {\n      return res.json();\n    })\n    .then(res =>{\n      this.setState({degree: res.best_degree, cost: res.best_cost}, ()=>{\n        this.refresh_graph();\n        console.log(this.state);\n      });\n    })\n    .catch(error => console.log('Error:', error));\n  }\n\n\n\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <Header src={this.state.plot_src} showModal={this.handle_modal_open}/>\n        <Onboarding showModal={this.state.show_modal} pages={onboarding_content} closeModal={this.handle_modal_close}/>\n        <div className='gui-container'>\n          <div className='svm-display'>\n            <Plot src={this.state.plot_src} isLoading={this.state.graph_loading}/>\n            <div className='graph-info-container'>\n              <div className='info-item'>\n                <div className='control-label'> Model Accuracy</div>\n                <div className='metric'>{this.state.model_accuracy}%</div>\n              </div>\n              <div className='info-item'>\n                <div className='control-label'> Degree</div>\n                <div className='metric'>{this.state.degree}</div>\n              </div>\n              <div className='info-item'>\n                <div className='control-label'> Cost</div>\n                <div className='metric'>{this.state.cost}</div>\n              </div>\n            </div>\n          </div>\n          <div className='controls'>\n            <Select label='X Variable' id='x_var' variable_name='mean concavity' onChange={this.handle_field_change}/>\n            <Select label='Y Variable' id='y_var' variable_name='worst concavity' onChange={this.handle_field_change}/>\n            <Slider label='Degree' id='degree' min='1' max='5' onChange={this.handle_field_change} value={this.state.degree}/>\n            <Slider label='Cost' id='cost' min='1' max='10' onChange={this.handle_field_change} value={this.state.cost}/>\n            <div className='button-container'>\n              <div className='update-graph' onClick={this.refresh_graph}>Graph</div>\n            </div>\n          </div>\n        </div>\n      \n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\r\nexport default function Introduction() {\r\n    return (\r\n        <div className='onboarding-content'>\r\n            \r\n            <h2>What is This?</h2>\r\n            \r\n            <p>\r\n                Create your own machine learning model and have it \r\n                classify cancer positive and cancer negative patients\r\n                by drawing boundaries between the two\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\n/*\r\n<p>\r\n                This cancer classifier uses two sets of data to determine whether\r\n                an individual has cancer or not. In order to make such \r\n                predictions, this classifier uses a support vector machine, a \r\n                machine learning model which attempts to draw boundaries bewteen \r\n                each classification of data. In our case, boundaries are drawn\r\n                between cancer positive and cancer negative patients.\r\n            </p>\r\n*/","import React from 'react'\r\nexport default function DataSelection() {\r\n    return (\r\n        <div className='onboarding-content'>\r\n            \r\n            <h2>First Choose Your Data</h2>\r\n            <p>\r\n                You can choose your <b>X Variable</b> and <b>Y Variable</b> data sets on the control\r\n                panel to the right of the graph  \r\n            </p>\r\n            <p>\r\n                This is the data your machine learning model will learn from\r\n            </p>\r\n            <p>\r\n                Don't worry about which data \r\n                set is the x variable and which is the y, the only thing \r\n                that matters is the combination!\r\n            </p>\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n/*\r\n<p>\r\n                <b>Note: </b>\r\n                The data sets you select have the greatest impact on the\r\n                accuracy of the classifier. Remember, this is the information \r\n                your classifier will learn from. For best results, you should \r\n                try to find a combination of data which creates the most \r\n                separation (puts the most distance) between cancer positive and \r\n                cancer negative points.\r\n            </p>\r\n*/","import React from 'react'\r\n\r\nexport default function ParameterSelection() {\r\n    return (\r\n        <div className='onboarding-content'>\r\n            <h2>Choose Parameters</h2>\r\n        \r\n                \r\n            <p>\r\n                <b>Cost: </b>\r\n                Determines how heavily to punish your model for incorrectly\r\n                classifying data points. The higher the cost, the greater\r\n                the punishment.\r\n            </p>\r\n\r\n            <p>\r\n                <b>Degree: </b>\r\n                Determines how flexible the decision boundary can be. The \r\n                higher the degree, the 'curvier' the separating line may\r\n                appear.\r\n            </p>\r\n            \r\n        \r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nexport default function GraphButtons() {\r\n    return (\r\n        <div className='onboarding-content'>\r\n            <h2>Update the Graph</h2> \r\n            <p>\r\n                <b>Graph: </b>\r\n                Creates your custom model which draws lines between\r\n                cancer positive and cancer negative patients\r\n            </p> \r\n           <p>\r\n               Blue regions are where your model thinks cancer positive \r\n               patients are and red regions are where your model thinks \r\n               cancer negative patients are\r\n           </p>\r\n        \r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nexport default function GraphButtons() {\r\n    return (\r\n        <div className='onboarding-content'>\r\n            <h2>That's it!</h2>\r\n            <p>\r\n                Check out the updated graph and see how well you did\r\n            </p>\r\n            <p>\r\n                The higher the model accuracy, the better your model\r\n                was able to predict the presence of cancer!\r\n            </p>\r\n        \r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}